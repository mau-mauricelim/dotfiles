FROM ubuntu:latest
ENV LANG=C.UTF-8 \
    LANGUAGE=C.UTF-8 \
    LC_ALL=C.UTF-8 \
    TERM=xterm-256color

# ARG should be after FROM
ARG USERNAME=maurice
ARG USER_UID=1001
ARG USER_GID=$USER_UID
ARG HOME=/home/$USERNAME

SHELL ["/bin/bash", "-c"]

# Bootstrap
RUN \
    # Install man pages in Ubuntu docker image
    sed -i 's:^path-exclude=/usr/share/man:#path-exclude=/usr/share/man:' /etc/dpkg/dpkg.cfg.d/excludes && \
    # Install required packages
    apt-get -qq update >/dev/null 2>&1 && \
        apt-get -qq install -y --no-install-recommends \
            # ca-certificates is required for build success, file is required for yazi
            # gcc is a C compiler for nvim-treesitter
            sudo zsh tar bzip2 unzip rlwrap curl ca-certificates git vim man less stow openssh-server tmux file gcc xclip && \
    # Manual install of man pages for release binaries
    mkdir -p /usr/local/share/man/man1 && \
    # Install MUSL ripgrep from source
    RIPGREP_VERSION=$(curl -sL "https://api.github.com/repos/BurntSushi/ripgrep/releases/latest" | grep tag_name | cut -d '"' -f4) && \
        curl -sL https://github.com/BurntSushi/ripgrep/releases/download/${RIPGREP_VERSION}/ripgrep-${RIPGREP_VERSION}-x86_64-unknown-linux-musl.tar.gz \
            | tar xz ripgrep-${RIPGREP_VERSION}-x86_64-unknown-linux-musl/{rg,doc/rg.1} --strip-components=1 && \
        install rg /usr/local/bin && mv doc/rg.1 /usr/local/share/man/man1 && rm -r rg doc && \
    # Install GNU fd from source
    FD_VERSION=$(curl -sL "https://api.github.com/repos/sharkdp/fd/releases/latest" | grep -Po '"tag_name": "v\K[^"]*') && \
        curl -sL https://github.com/sharkdp/fd/releases/download/v${FD_VERSION}/fd-v${FD_VERSION}-x86_64-unknown-linux-gnu.tar.gz \
            | tar xz fd-v${FD_VERSION}-x86_64-unknown-linux-gnu/{fd,fd.1} --strip-components=1 && \
        install fd /usr/local/bin && mv fd.1 /usr/local/share/man/man1 && rm fd && \
    # Install GNU bat from source
    BAT_VERSION=$(curl -sL "https://api.github.com/repos/sharkdp/bat/releases/latest" | grep -Po '"tag_name": "v\K[^"]*') && \
        curl -sL https://github.com/sharkdp/bat/releases/download/v${BAT_VERSION}/bat-v${BAT_VERSION}-x86_64-unknown-linux-gnu.tar.gz \
            | tar xz bat-v${BAT_VERSION}-x86_64-unknown-linux-gnu/{bat,bat.1} --strip-components=1 && \
        install bat /usr/local/bin && mv bat.1 /usr/local/share/man/man1 && rm bat && \
    # Install GNU eza from source
    EZA_VERSION=$(curl -sL "https://api.github.com/repos/eza-community/eza/releases/latest" | grep -Po '"tag_name": "v\K[^"]*') && \
        curl -sL https://github.com/eza-community/eza/releases/latest/download/eza_x86_64-unknown-linux-gnu.tar.gz | tar xz && \
        curl -sL https://github.com/eza-community/eza/releases/latest/download/man-${EZA_VERSION}.tar.gz | tar xz ./target/man-${EZA_VERSION}/eza.1 --strip-components=3 && \
        install eza /usr/local/bin && mv eza.1 /usr/local/share/man/man1 && rm eza && \
    # Install GNU delta from source
    DELTA_VERSION=$(curl -sL "https://api.github.com/repos/dandavison/delta/releases/latest" | grep tag_name | cut -d '"' -f4) && \
        curl -sL https://github.com/dandavison/delta/releases/latest/download/delta-${DELTA_VERSION}-x86_64-unknown-linux-gnu.tar.gz \
            | tar xz delta-${DELTA_VERSION}-x86_64-unknown-linux-gnu/delta --strip-components=1 && \
        install delta /usr/local/bin && rm delta && \
    # Install GNU yazi from source
    YAZI_VERSION=$(curl -sL "https://api.github.com/repos/sxyazi/yazi/releases/latest" | grep tag_name | cut -d '"' -f4) && \
        curl -sLo yazi.zip https://github.com/sxyazi/yazi/releases/download/${YAZI_VERSION}/yazi-x86_64-unknown-linux-gnu.zip && \
        unzip -qj yazi.zip yazi-x86_64-unknown-linux-gnu/yazi && \
        install yazi /usr/local/bin && rm yazi yazi.zip && \
    # Install GNU Neovim from source
    curl -LO https://github.com/neovim/neovim/releases/latest/download/nvim-linux64.tar.gz && \
        rm -rf /opt/nvim && \
        tar -C /opt -xzf nvim-linux64.tar.gz && rm nvim-linux64.tar.gz && \
    # Install LINUX lazygit from source
    LAZYGIT_VERSION=$(curl -sL "https://api.github.com/repos/jesseduffield/lazygit/releases/latest" | grep -Po '"tag_name": "v\K[^"]*') && \
        curl -sL https://github.com/jesseduffield/lazygit/releases/latest/download/lazygit_${LAZYGIT_VERSION}_Linux_x86_64.tar.gz \
            | tar xz lazygit && \
        install lazygit /usr/local/bin && rm lazygit && \
    # Install LINUX jq
    JQ_VERSION=$(curl -sL "https://api.github.com/repos/jqlang/jq/releases/latest" | grep tag_name | cut -d '"' -f4) && \
        curl -sLo jq https://github.com/jqlang/jq/releases/latest/download/jq-linux-amd64 && \
        curl -sL https://github.com/jqlang/jq/releases/latest/download/${JQ_VERSION}.tar.gz | tar xz ${JQ_VERSION}/jq.1 --strip-components=1 && \
        install jq /usr/local/bin && mv jq.1 /usr/local/share/man/man1 && rm jq && \
    # Install zoxide
    curl -sLS https://raw.githubusercontent.com/ajeetdsouza/zoxide/main/install.sh | bash -s -- --bin-dir /usr/local/bin --man-dir /usr/local/share/man && \
    # Clean up
    apt-get -qq remove ca-certificates && \
        apt-get -qq autoclean -y && \
        apt-get -qq clean -y && \
        apt-get -qq autoremove -y && \
        rm -rf /var/cache/apt/archives /var/lib/apt/lists && \
    # Create user
    groupadd --gid $USER_GID $USERNAME && \
        # Set Zsh as the default shell
        useradd --uid $USER_UID --gid $USER_GID -m -N -s /bin/zsh $USERNAME && \
        mkdir -p /etc/sudoers.d && \
        echo $USERNAME ALL=\(root\) NOPASSWD:ALL > /etc/sudoers.d/$USERNAME && \
        chmod 0440 /etc/sudoers.d/$USERNAME && \
        # Add docker permissions
        groupadd docker && \
        usermod -aG docker $USERNAME && \
    # Set default user for WSL and Network settings
    echo -e "[user]\ndefault=$USERNAME\n[interop]\nappendWindowsPath=false" >> /etc/wsl.conf

# Set default user
USER $USERNAME
WORKDIR $HOME
# Setup dotfiles
COPY --chown=$USERNAME:$USERNAME tests /tmp/tests

# Bootstrap
# Create the top level directories before stowing so that stow does not symlink from the top level
RUN mkdir -p $HOME/.config/{nvim,tmux,yazi,zsh} $HOME/.vim && \
    # Stow the dotfiles
    git clone -q --depth=1 https://github.com/mau-mauricelim/dotfiles.git $HOME/dotfiles && \
        cd $HOME/dotfiles && git remote set-url origin git@github.com:mau-mauricelim/dotfiles.git && \
        stow . && git restore . && cd $HOME && \
    # Install local binaries
    sudo install $HOME/dotfiles/bin/* /usr/local/bin && \
    # Create a symlink for zshenv to HOME
    ln -s $HOME/.config/zsh/.zshenv $HOME/.zshenv && \
    # Source the latest zshenv
    source $HOME/.zshenv && \
    # Create ZDOTDIR, XDG_DATA_HOME
    mkdir -p $ZDOTDIR $XDG_DATA_HOME/{nvim,vim}/{undo,swap,backup} && \
    # Zsh Theme - Powerlevel10k (Requires manual font installation)
    git clone -q --depth=1 https://github.com/romkatv/powerlevel10k.git $ZDOTDIR/powerlevel10k && \
    # Zsh Auto Suggestions
    git clone -q --depth=1 https://github.com/zsh-users/zsh-autosuggestions $ZDOTDIR/zsh-autosuggestions && \
    # Zsh Syntax Highlighting
    git clone -q --depth=1 https://github.com/zsh-users/zsh-syntax-highlighting.git $ZDOTDIR/zsh-syntax-highlighting && \
    # fzf
    git clone -q --depth 1 https://github.com/junegunn/fzf.git $ZDOTDIR/fzf && \
        $ZDOTDIR/fzf/install --xdg --no-update-rc --completion --key-bindings >/dev/null 2>&1 && \
    # Vim syntax and indent
    mkdir -p $HOME/.vim/{indent,syntax} && \
        git clone -q --depth=1 https://github.com/katusk/vim-qkdb-syntax.git $HOME/.vim/vim-qkdb-syntax && \
            ln -s $HOME/.vim/vim-qkdb-syntax/indent/{k,q}.vim $HOME/.vim/indent && \
            ln -s $HOME/.vim/vim-qkdb-syntax/syntax/k.vim $HOME/.vim/syntax && \
        git clone -q --depth=1 https://github.com/jshinonome/vim-q-syntax.git $HOME/.vim/vim-q-syntax && \
            ln -s $HOME/.vim/vim-q-syntax/syntax/q.vim $HOME/.vim/syntax && \
    # Symlink Vim syntax and indent files to Neovim
    ln -s $HOME/.vim/indent $XDG_CONFIG_HOME/nvim && \
        ln -s $HOME/.vim/syntax $XDG_CONFIG_HOME/nvim && \
    # bash and zsh key bindings for Git objects, powered by fzf.
    curl -sLo $XDG_CONFIG_HOME/fzf/fzf-git.sh https://raw.githubusercontent.com/junegunn/fzf-git.sh/main/fzf-git.sh && \
    # TPM installation
    # git clone -q --depth=1 https://github.com/tmux-plugins/tpm $XDG_CONFIG_HOME/tmux/plugins/tpm && $XDG_CONFIG_HOME/tmux/plugins/tpm/bin/install_plugins && \
    # Install nvm, node.js, and npm
    PROFILE=/dev/null bash -c 'curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash' && \
        export NVM_DIR="$([ -z "${XDG_CONFIG_HOME-}" ] && printf %s "${HOME}/.nvm" || printf %s "${XDG_CONFIG_HOME}/nvm")"; \
        [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" && \
        nvm install node && \
    # Install q language server for neovim
    npm --global i @jo.shinonome/qls && \
    # Install yazi themes
    git clone -q --depth=1 https://github.com/yazi-rs/flavors.git flavors && \
        mkdir -p $XDG_CONFIG_HOME/yazi/flavors && \
        mv flavors/*.yazi $XDG_CONFIG_HOME/yazi/flavors && rm -rf flavors && \
    # Run Lazy install, clean and update non-interactively from command line
    # nvim --headless '+Lazy! sync' +qa && \
    # Run tests
    echo -e "\n#########\n# TESTS #\n#########\n" && \
        for test in /tmp/tests/*.sh; do bash "$test"; done && \
        rm -rf /tmp/tests && \
    # Start zsh and exit (It'll allow powerlevel10k to do everything it needs to do on first run.)
    echo exit | script -qec zsh /dev/null >/dev/null
