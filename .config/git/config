# The variable names are case-insensitive
[alias]
    root = rev-parse --show-toplevel
    # Prefixed with a bang (!): evaluate in a shell
    which = !git branch | grep -i
    # If you are using alias with positional parameters,
    # then you need to wrap it in single-quotes so that git does not evaluate it,
    # then pass it to your shell along with a dash (-) so that the arguments get passed through
    # and your shell will evaluate it
    lucky = !sh -c 'git checkout $(git which $1 -m1)' -
    # Add files to your previous commit
    commend = commit --amend --no-edit
    # Save changes to previous commit and push
    save = !git add -A && git commit --amend --no-edit && git push --force-with-lease origin HEAD
    # Clone repository and cd into it
    take = "!f() { git clone \"$1\" && cd \"$(basename \"$1\" .git)\"; }; f"
    reword = commit --amend
    unstage = restore --staged
    st = status --short --branch
    sta = status
    br = branch
    rename = branch -m
    co = checkout
    cob = checkout -b
    col = checkout -
    aa = add -A
    rmc = rm --cached
    cm = commit -m
    pm = pull origin main
    mt = mergetool
    # Prune and force delete untracked local branches
    # git fetch --prune && git branch -r | awk "{print \$1}" | grep -E -v -f /dev/fd/0 <(git branch -vv | grep origin) | awk "{print \$1}" | xargs git branch -D
    fop = !git fetch --prune && git branch -r | awk \"{print \\$1}\" | grep -E -v -f /dev/fd/0 <(git branch -vv | grep origin) | awk \"{print \\$1}\" | xargs git branch -D
    unshallow = fetch --unshallow
    bdel = branch -D
    bdelr = push origin --delete
    please = push --force-with-lease
    pooh = !git push --force-with-lease origin HEAD
    done = !git push origin HEAD
    rbi = !git fetch && git rebase -i
    rb1 = !git rebase -i HEAD~1
    rb2 = !git rebase -i HEAD~2
    rb3 = !git rebase -i HEAD~3
    rb4 = !git rebase -i HEAD~4
    rbc = rebase --continue
    rba = rebase --abort
    ma = merge --abort
    nuke = !git reset --hard
    undo = !git reset --soft HEAD~1
    redo = !git reset ORIG_HEAD # Magic
    rl = reflog # To redo the change(s) - git reset HEAD@{N}
    wipe = clean -xdf
    # Last log
    ll = log -1
    lls = log -1 --stat
    lol = log --oneline --decorate
    lols = log --oneline --decorate --stat
    graph = log --oneline --decorate --graph
    adog = log --all --decorate --oneline --graph # A Dog
    dogs = log --all --decorate --oneline --graph --stat # All Dogs
    lg1 = log --all --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(auto)%d%C(reset)'
    lg2 = log --all --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(auto)%d%C(reset)%n''          %C(white)%s%C(reset) %C(dim white)- %an%C(reset)'
    lg3 = log --all --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset) %C(bold cyan)(committed: %cD)%C(reset) %C(auto)%d%C(reset)%n''          %C(white)%s%C(reset)%n''          %C(dim white)- %an <%ae> %C(reset) %C(dim white)(committer: %cn <%ce>)%C(reset)'
    # Git diff toggle side-by-side
    dt = "!sh -c '[ $(git config delta.side-by-side) = true ] && git config delta.side-by-side false || git config delta.side-by-side true; git diff'"
    ds = diff --staged
    dss = diff --staged --stat
    da = diff HEAD
    das = diff HEAD --stat
    dn = diff --no-index
    dni = diff --no-index --ignore-space-at-eol
    # Create GitLab merge request
    mrc = !git push origin HEAD -o merge_request.create -o merge_request.title=$(git rev-parse --abbrev-ref HEAD) -o merge_request.draft -o merge_request.remove_source_branch -o merge_request.squash
    cfg = config --list --show-origin
    cfgl = config --list --show-origin --local
    cfgg = config --list --show-origin --global
    edit = !git config --file $XDG_CONFIG_HOME/git/config --edit

[init]
    defaultBranch = main

[pull]
    rebase = interactive # git pull --rebase=i

[push]
    default = current
    autosetupremote = true
    followTags = true

# delta config
[core]
    pager = "if command -v delta >/dev/null; then delta; else less -FRX; fi"

[interactive]
    diffFilter = delta --color-only

[delta]
    navigate = true # use n and N to move between diff sections
    # Truncate lines longer than this. To prevent any truncation, set to zero.
    # Note that syntax-highlighting very long lines (e.g. minified .js) will be very slow if they are not truncated [default: 512]
    max-line-length = 1024
    side-by-side = true
    line-numbers = true

[merge]
    conflictstyle = zdiff3

[diff]
    algorithm = histogram
    colorMoved = plain
    mnemonicPrefix = true

[grep]
    lineNumber = true
    patternType = perl

[column]
    ui = auto

[branch]
    sort = -committerdate

[tag]
    sort = -version:refname

[fetch]
    prune = true
    pruneTags = true
    all = true

[help]
    autocorrect = prompt
