# The variable names are case-insensitive
[alias]
    root = rev-parse --show-toplevel
    # Prefixed with a bang (!): evaluate in a shell
    which = !git branch | grep -i
    # If you are using alias with positional parameters,
    # then you need to wrap it in single-quotes so that git does not evaluate it,
    # then pass it to your shell along with a dash (-) so that the arguments get passed through
    # and your shell will evaluate it
    lucky = !sh -c 'git checkout $(git which $1 -m1)' -
    # Add files to your previous commit
    commend = commit --amend --no-edit
    # Edit commit message
    edit = commit --amend
    unstage = restore --staged
    st = status --short --branch
    sta = status
    br = branch
    co = checkout
    cob = checkout -b
    aa = add -A
    cm = commit -m
    pm = pull origin main
    fop = fetch origin --prune
    bdel = branch -d
    bdelr = push origin -d
    please = push --force-with-lease origin HEAD
    rbi = !git fetch && git rebase -i
    rbc = rebase --continue
    rba = rebase --abort
    nuke = reset --hard
    wipe = clean -xdf
    adog = log --all --decorate --oneline --graph # A Dog
    dogs = log --all --decorate --oneline --graph --stat # All Dogs
    lg1 = log --all --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(auto)%d%C(reset)'
    lg2 = log --all --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(auto)%d%C(reset)%n''          %C(white)%s%C(reset) %C(dim white)- %an%C(reset)'
    lg3 = log --all --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset) %C(bold cyan)(committed: %cD)%C(reset) %C(auto)%d%C(reset)%n''          %C(white)%s%C(reset)%n''          %C(dim white)- %an <%ae> %C(reset) %C(dim white)(committer: %cn <%ce>)%C(reset)'
    # Git diff toggle side-by-side
    dt = !sh -c '[ $(git config delta.side-by-side) = true ] && git config delta.side-by-side false || git config delta.side-by-side true'
    ds = diff --staged
    dss = diff --staged --stat
    da = diff HEAD
    das = diff HEAD --stat
    dn = diff --no-index
    dni = diff --no-index --ignore-space-at-eol
    # Create GitLab merge request
    mrc = !git push origin HEAD -o merge_request.create -o merge_request.title=$(git rev-parse --abbrev-ref HEAD) -o merge_request.draft -o merge_request.remove_source_branch -o merge_request.squash
    cfg = config -l
    gcfg = config --global -l

[pull]
    # git pull --rebase=i[nteractive]
    rebase = interactive

[push]
    default = current

# delta config
[core]
    pager = delta

[interactive]
    diffFilter = delta --color-only

[delta]
    navigate = true # use n and N to move between diff sections
    # Truncate lines longer than this. To prevent any truncation, set to zero.
    # Note that syntax-highlighting very long lines (e.g. minified .js) will be very slow if they are not truncated [default: 512]
    max-line-length = 1024

    # delta detects terminal colors automatically; set one of these to disable auto-detection
    # dark = true
    # light = true

[merge]
    conflictstyle = diff3

[diff]
    colorMoved = default

[delta]
    side-by-side = true

[delta]
    line-numbers = true
