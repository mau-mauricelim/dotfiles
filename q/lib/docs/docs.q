// NOTE: This q script was generated using mkdocs.q

/########
/# Docs #
/########

.docs.refs:.docs.libs:()!();
.docs.docs:{[name]
    if[not name in key .docs.refs;.log.warn"Docs name not found. Please add to docs.";.log.info"Available docs:",.log.plainText .docs.refs;:(::)];
    .util.stdout .docs.libs name};

.docs.refs[`attr]:"Attributes";
.docs.libs[`attr]:(
    "https://code.kx.com/q/ref/set-attribute/";
    "";
    "Attributes";
    "+------------+-----------+--------------------------+-------------------+--------------------------+    legend";
    "| literal    | attribute | description              | datatype          | memory overhead in bytes |    +---+--------------------------+";
    "+------------+-----------+--------------------------+-------------------+--------------------------+    | n | count of unique elements |";
    "| `#`s#2 2 3 | none      | remove attribute         | list, dict, table |                          |    | u | unique element           |";
    "| `s#2 2 3   | sorted    | items in ascending order | list, dict, table | 0                        |    +---+--------------------------+";
    "| `u#2 4 5   | unique    | each item unique         | list              | 16*n                     |";
    "| `p#2 2 1   | parted    | common values adjacent   | simple list       | (16+8)*u                 |";
    "| `g#2 1 2   | grouped   | make a hash table        | list              | (16+8)*u+8*n             |";
    "+------------+-----------+--------------------------+-------------------+--------------------------+";
    "- Setting or unsetting an attribute other than sorted causes a copy of the object to be made.";
    "- s, u and g are preserved on append in memory, if possible. Only s is preserved on append to disk.";
    "";
    "Errors";
    "+--------+--------------------------------------+";
    "| s-fail | not sorted ascending                 |";
    "| type   | tried to set u, p or g on wrong type |";
    "| u-fail | not unique or not parted             |";
    "+--------+--------------------------------------+";
    "";
    "Sorted";
    "- Setting the sorted attribute on a unkeyed table sets the parted attribute on the first column.";
    "+-----------------------------------------------------------+";
    "| q)meta`s#([] ti:00:00:00 00:00:01 00:00:03; v:98 98 100.) |";
    "| c | t f a                                                 |";
    "| --| -----                                                 |";
    "| ti| v   p                                                 |";
    "| v | f                                                     |";
    "+-----------------------------------------------------------+";
    "";
    "- Setting the sorted attribute on a dictionary (keyed table), where the key is already in sorted order,";
    "  in order to obtain a step-function, sets the sorted attribute for the key but copies the outer object.";
    "+-------------------------------------------------------------+";
    "| q)meta`s#1!([] ti:00:00:00 00:00:01 00:00:03; v:98 98 100.) |";
    "| c | t f a                                                   |";
    "| --| -----                                                   |";
    "| ti| v   s                                                   |";
    "| v |                                                         |";
    "+-------------------------------------------------------------+";
    "";
    "Step dictionary (keyed table)";
    "+--------------------------------------------------------+";
    "| q)d:00:00:00 00:00:01 00:00:03!98 98 100               |";
    "| q)d 00:00:02                                           |";
    "| 0N                                                     |";
    "| q)(`s#d)00:00:02                                       |";
    "| 98                                                     |";
    "| q)d:1!([] ti:00:00:00 00:00:01 00:00:03; v:98 98 100.) |";
    "| q)d 00:00:02                                           |";
    "| v|                                                     |";
    "| q)(`s#d)00:00:02                                       |";
    "| v| 98                                                  |";
    "+--------------------------------------------------------+");

.docs.refs[`attrtick]:"Attributes in the KDB-Tick Stack";
.docs.libs[`attrtick]:(
    "https://www.defconq.tech/docs/concepts/attributes#attributes-in-the-kdb-tick-stack";
    "";
    "Tickerplant (TP) attributes";
    "- sorted attribute to the time column";
    "- grouped attribute to the sym column";
    "- subscribers (RDB/RTS) will inherit the same attributes";
    "";
    "Historical Database (HDB) attributes";
    "- On-disk data is sorted with parted attribute applied to the sym column");

.docs.refs[`cmdline]:"Command-line options and system commands";
.docs.libs[`cmdline]:(
    "https://code.kx.com/q/ref/#command-line-options-and-system-commands";
    "";
    "Command-line options and system commands";
    "+-------+------------------------+----------+---------------------+";
    "| file  |                        |          |                     |";
    "| \\a    | tables                 | \\r       | rename              |";
    "| -b    | blocked                | -s \\s    | secondary processes |";
    "| \\b \\B | views                  | -S \\S    | random seed         |";
    "| -c \\c | console size           | -t \\t    | timer ticks         |";
    "| -C \\C | HTTP size              | \\ts      | time and space      |";
    "| \\cd   | change directory       | -T \\T    | timeout             |";
    "| \\d    | directory              | -u -U \\u | usr-pwd             |";
    "| -e \\e | error traps            | -u       | disable syscmds     |";
    "| -E \\E | TLS server mode        | \\v       | variables           |";
    "| \\f    | functions              | -w \\w    | memory              |";
    "| -g \\g | garbage collection     | -W \\W    | week offset         |";
    "| \\l    | load file or directory | \\x       | expunge             |";
    "| -l -L | log sync               | -z \\z    | date format         |";
    "| -o \\o | UTC offset             | \\1 \\2    | redirect            |";
    "| -p \\p | listening port         | \\_       | hide q code         |";
    "| -P \\P | display precision      | \\        | terminate           |";
    "| -q    | quiet mode             | \\        | toggle q/k          |";
    "| -r \\r | replicate              | \\\\       | quit                |";
    "+-------+------------------------+----------+---------------------+");

.docs.refs[`debug]:"Debugging";
.docs.libs[`debug]:(
    "https://code.kx.com/q/basics/debug/#debugging";
    "";
    "Debugging";
    "+----------+-----------------------------------------------+";
    "| q))      | extra right parens mark suspended execution/s |";
    "| 'myerror | Signal error, cut back stack                  |";
    "| :r       | exit suspended function with r as result      |";
    "| \\        | abort execution and exit debugger             |";
    "| .Q.bt    | dump backtrace                                |";
    "| &        | current frame information                     |";
    "| .Q.trp   | extends Trap At to collect backtrace          |";
    "| -e \\e    | error-trap mode                               |";
    "+----------+-----------------------------------------------+";
    "";
    "Debugger";
    "- Usually when an error happens inside a lambda the execution is suspended and you enter the debugger,";
    "  as indicated by the additional ) following the normal q) prompt.";
    "+---------------------------------------------------------------------------------------------------+";
    "| q)f:{g[x;2#y]}                                                                                    |";
    "| q)g:{a:x*2;a+y}                                                                                   |";
    "| q)f[3;\"hello\"]                                                                                    |";
    "| 'type                                                                                             |";
    "|   [2]  g:{a:x*2;a+y}                                                                              |";
    "|                  ^                                                                                |";
    "+---------------------------------------------------------------------------------------------------+";
    "| q)).Q.bt[]              / Dump the backtrace to stdout. Highlight current stack frame with >>.    |";
    "| >>[2]  g:{a:x*2;a+y}                                                                              |";
    "|                  ^                                                                                |";
    "|   [1]  f:{g[x;2#y]}                                                                               |";
    "|           ^                                                                                       |";
    "|   [0]  q)f[3;\"hello\"]                                                                             |";
    "|          ^                                                                                        |";
    "| q))&                    / Current frame information                                               |";
    "| 'type                                                                                             |";
    "|   [2]  g:{a:x*2;a+y}                                                                              |";
    "|                  ^                                                                                |";
    "+---------------------------------------------------------------------------------------------------+";
    "| q))a*4                  / The debug prompt allows operating on values defined in the local scope. |";
    "| 24                                                                                                |";
    "+---------------------------------------------------------------------------------------------------+";
    "| q))`                    / Navigate up the stack                                                   |";
    "|   [1]  f:{g[x;2#y]}                                                                               |";
    "|           ^                                                                                       |";
    "| q))`                                                                                              |";
    "|   [0]  f[3;\"hello\"]                                                                               |";
    "|        ^                                                                                          |";
    "| q)).                    / Navigate down the stack                                                 |";
    "|   [1]  f:{g[x;2#y]}                                                                               |";
    "|          ^                                                                                        |";
    "+---------------------------------------------------------------------------------------------------+";
    "| q)).z.ex                / Failed primitive                                                        |";
    "| +                                                                                                 |";
    "| q)).z.ey                / Argument list                                                           |";
    "| 6                                                                                                 |";
    "| \"he\"                                                                                              |";
    "+---------------------------------------------------------------------------------------------------+";
    "| q))'myerror             / 'err will signal err from the deepest frame available, destroying it.   |";
    "| 'myerror                                                                                          |";
    "|   [1]  f:{g[x;2#y]}                                                                               |";
    "|           ^                                                                                       |";
    "| q))'myerror                                                                                       |";
    "| 'myerror                                                                                          |";
    "|   [0]  f[3;\"hello\"]                                                                               |";
    "|        ^                                                                                          |";
    "| q)'myerror                                                                                        |";
    "| 'myerror                                                                                          |";
    "|   [0]  'myerror                                                                                   |";
    "|         ^                                                                                         |";
    "| q)                                                                                                |";
    "+---------------------------------------------------------------------------------------------------+";
    "";
    "Resume";
    "- When execution is suspended, :e resumes with e as the result of the failed operation. e defaults to null ::.";
    "- Note that resume does not return from enclosing function";
    "";
    "Error trap modes";
    "- At any point during execution, the behavior of Signal (') is determined by the internal error-trap mode:";
    "+---+-----------------------------------------------+";
    "| 0 | abort execution (set by Trap: @ or .)         |";
    "| 1 | suspend execution and run the debugger        |";
    "| 2 | collect stack trace and abort (set by .Q.trp) |";
    "+---+-----------------------------------------------+");

.docs.refs[`doth]:"The .h namespace";
.docs.libs[`doth]:(
    "https://code.kx.com/q/ref/doth/#the-h-namespace";
    "";
    "Markup tools";
    "+---------------------------------+------------------------------+";
    "| Markup (HTML and XML)           | Data Serialization           |";
    "+---------------------------------+------------------------------+";
    "| .h.br   | linebreak             | .h.cd      CSV from data     |";
    "| .h.code | code after Tab        | .h.d       delimiter         |";
    "| .h.fram | frame                 | .h.ed      Excel from data   |";
    "| .h.ha   | anchor                | .h.edsn    Excel from tables |";
    "| .h.hb   | anchor target         | .h.ht      Marqdown to HTML  |";
    "| .h.hc   | escape lt             | .h.iso8601 ISO timestamp     |";
    "| .h.hr   | horizontal rule       | .h.jx      table             |";
    "| .h.hta  | start tag             | .h.td      TSV from data     |";
    "| .h.htac | element               | .h.tx      filetypes         |";
    "| .h.htc  | element               | .h.xd      XML from data     |";
    "| .h.html | document              | .h.xt      JSON              |";
    "| .h.http | hyperlinks            +------------------------------+";
    "| .h.logo | KX logo               | Web Console                  |";
    "| .h.nbr  | no break              +------------------------------+";
    "| .h.pre  | pre                   | .h.c0    web color           |";
    "| .h.text | paragraphs            | .h.c1    web color           |";
    "| .h.xmp  | XMP                   | .h.HOME  webserver root      |";
    "| .h.xs   | XML escape            | .h.sa    anchor style        |";
    "|         |                       | .h.sb    body style          |";
    "|         |                       | .h.val   value               |";
    "+---------+-----------------------+------------------------------+";
    "| HTTP    |                       | URI formatting               |";
    "+---------+-----------------------+------------------------------+";
    "| .h.he   | HTTP 400              | .h.hu      URI escape        |";
    "| .h.hn   | HTTP response         | .h.hug     URI map           |";
    "| .h.hp   | HTTP response pre     | .h.sc      URI-safe          |";
    "| .h.hy   | HTTP response content | .h.uh      URI unescape      |";
    "| .h.ka   | HTTP keep-alive       |                              |";
    "| .h.ty   | MIME types            |                              |";
    "+---------+-----------------------+------------------------------+";
    "The .h namespace contains objects for";
    "- marking up strings as HTML";
    "- converting data into various formats";
    "- composing HTTP responses";
    "- web-console display");

.docs.refs[`dotj]:"The .j namespace";
.docs.libs[`dotj]:(
    "https://code.kx.com/q/ref/dotj/#the-j-namespace";
    "";
    "The .j namespace";
    "+-------+--------------------+";
    "| .j.j  | serialize          |";
    "| .j.k  | deserialize        |";
    "| .j.jd | serialize infinity |";
    "+-------+--------------------+";
    "The .j namespace contains functions for converting between JSON and q dictionaries.";
    "";
    ".j.k (deserialize)";
    "+------------------------------------------------------------------+";
    "| q)show dict:`a`b!(0 1;(\"hello\";\"world\"))                         |";
    "| a| 0       1                                                     |";
    "| b| \"hello\" \"world\"                                               |";
    "| q).j.j dict                                                      |";
    "| \"{\\\"a\\\":[0,1],\\\"b\\\":[\\\"hello\\\",\\\"world\\\"]}\"                      |";
    "| q)-1 .j.j dict;                                                  |";
    "| {\"a\":[0,1],\"b\":[\"hello\",\"world\"]}                                |";
    "| q).j.k .j.j dict                                                 |";
    "| a| 0       1                                                     |";
    "| b| \"hello\" \"world\"                                               |";
    "| q)show tab:([]a:1 2;b:`Greetings`Earthlings)                     |";
    "| a b                                                              |";
    "| ------------                                                     |";
    "| 1 Greetings                                                      |";
    "| 2 Earthlings                                                     |";
    "| q).j.j tab                                                       |";
    "| \"[{\\\"a\\\":1,\\\"b\\\":\\\"Greetings\\\"},{\\\"a\\\":2,\\\"b\\\":\\\"Earthlings\\\"}]\" |";
    "| q).j.k .j.j tab                                                  |";
    "| a b                                                              |";
    "| --------------                                                   |";
    "| 1 \"Greetings\"                                                    |";
    "| 2 \"Earthlings\"                                                   |";
    "+------------------------------------------------------------------+";
    "";
    "Reading JSON data into a K (kdb) object";
    "+--------------------------------+";
    "| q)`:tab.json 0:enlist .j.j tab |";
    "| `:tab.json                     |";
    "| q).j.k raze read0`:tab.json    |";
    "| a b                            |";
    "| --------------                 |";
    "| 1 \"Greetings\"                  |";
    "| 2 \"Earthlings\"                 |";
    "| q).j.k read1`:tab.json         |";
    "| a b                            |";
    "| --------------                 |";
    "| 1 \"Greetings\"                  |";
    "| 2 \"Earthlings\"                 |";
    "+--------------------------------+");

.docs.refs[`dotq]:"The .Q namespace";
.docs.libs[`dotq]:(
    "https://code.kx.com/q/ref/dotq/#the-q-namespace";
    "";
    "The .Q namespace";
    "+------------------------------------------+--------------------------------------------------+";
    "| General                                  | Datatype                                         |";
    "+-----------------+------------------------+------------------+-------------------------------+";
    "| .Q.addmonths    | add months             | .Q.btoa          | b64 encode                    |";
    "| .Q.dd           | join symbols           | .Q.j10           | encode binhex                 |";
    "| .Q.f            | precision format       | .Q.j12           | encode base 36                |";
    "| .Q.fc           | parallel on cut        | .Q.ty            | type                          |";
    "| .Q.ff           | append columns         | .Q.x10           | decode binhex                 |";
    "| .Q.fmt          | precision format       | .Q.x12           | decode base 36                |";
    "| .Q.ft           | apply simple           +------------------+-------------------------------+";
    "| .Q.fu           | apply unique           | Database                                         |";
    "| .Q.gc           | garbage collect        +------------------+-------------------------------+";
    "| .Q.gz           | GZip                   | .Q.chk           | fill HDB                      |";
    "| .Q.id           | sanitize               | .Q.dpft .Q.dpfts | save table                    |";
    "| .Q.qt           | is table               | .Q.dpt  .Q.dpts  | save table unsorted           |";
    "| .Q.res          | keywords               | .Q.dsftg         | load process save             |";
    "| .Q.s            | plain text             | .Q.en            | enumerate varchar cols        |";
    "| .Q.s1           | string representation  | .Q.ens           | enumerate against domain      |";
    "| .Q.sha1         | SHA-1 encode           | .Q.fk            | foreign key                   |";
    "| .Q.V            | table to dict          | .Q.hdpf          | save tables                   |";
    "| .Q.v            | value                  | .Q.l             | load                          |";
    "| .Q.view         | subview                | .Q.ld            | load and group                |";
    "+-----------------+------------------------+ .Q.li            | load partitions               |";
    "| Constants                                | .Q.lo            | load without                  |";
    "+-----------------+------------------------+ .Q.M             | chunk size                    |";
    "| .Q.A .Q.a .Q.an | alphabets              | .Q.qp            | is partitioned                |";
    "| .Q.b6           | bicameral alphanums    | .Q.qt            | is table                      |";
    "| .Q.n .Q.nA      | nums & alphanums       |                  |                               |";
    "+-----------------+------------------------+------------------+-------------------------------+";
    "| Debug/Profile                            | Partitioned database state                       |";
    "+-----------------+------------------------+------------------+-------------------------------+";
    "| .Q.bt           | backtrace              | .Q.bv            | build vp                      |";
    "| .Q.prf0         | code profiler          | .Q.bvi           | build incremental vp          |";
    "| .Q.sbt          | string backtrace       | .Q.cn            | count partitioned table       |";
    "| .Q.trp          | extend trap at         | .Q.D             | partitions                    |";
    "| .Q.trpd         | extend trap            | .Q.ind           | partitioned index             |";
    "| .Q.ts           | time and space         | .Q.MAP           | maps partitions               |";
    "+-----------------+------------------------+ .Q.par           | locate partition              |";
    "| Environment                              | .Q.PD            | partition locations           |";
    "+-----------------+------------------------+ .Q.pd            | modified partition locns      |";
    "| .Q.K .Q.k       | version                | .Q.pf            | partition field               |";
    "| .Q.w            | memory stats           | .Q.pn            | partition counts              |";
    "+-----------------+------------------------+ .Q.pt            | partitioned tables            |";
    "| Environment (Command-line)               | .Q.PV            | partition values              |";
    "+-----------------+------------------------+ .Q.pv            | modified partition values     |";
    "| .Q.def          | command defaults       | .Q.qp            | is partitioned                |";
    "| .Q.opt          | command parameters     | .Q.vp            | missing partitions            |";
    "| .Q.x            | non-command parameters |                  |                               |";
    "+-----------------+------------------------+------------------+-------------------------------+";
    "| IPC                                      | Segmented database state                         |";
    "+-----------------+------------------------+------------------+-------------------------------+";
    "| .Q.addr         | IP/host as int         | .Q.P             | segments                      |";
    "| .Q.fps .Q.fpn   | pipe streaming         | .Q.u             | date based                    |";
    "| .Q.fs  .Q.fsn   | file streaming         +------------------+-------------------------------+";
    "| .Q.hg           | HTTP get               | File I/O                                         |";
    "| .Q.host         | IP to hostname         +------------------+-------------------------------+";
    "| .Q.hp           | HTTP post              | .Q.Cf            | create empty nested char file |";
    "|                 |                        | .Q.Xf            | create file                   |";
    "+-----------------+------------------------+------------------+-------------------------------+");

.docs.refs[`dotz]:"The .z namespace";
.docs.libs[`dotz]:(
    "https://code.kx.com/q/ref/dotz/#the-z-namespace";
    "";
    "The .z namespace";
    "+------------------------------------------+---------------------------+";
    "| Environment                              | Callbacks                 |";
    "+--------+---------------------------------+---------+-----------------+";
    "| .z.a   | IP address                      | .z.bm   | msg validator   |";
    "| .z.b   | view dependencies               | .z.exit | action on exit  |";
    "| .z.c   | cores                           | .z.pc   | close           |";
    "| .z.f   | file                            | .z.pd   | peach handles   |";
    "| .z.h   | host                            | .z.pg   | get             |";
    "| .z.i   | PID                             | .z.pi   | input           |";
    "| .z.K   | version                         | .z.po   | open            |";
    "| .z.k   | release date                    | .z.pq   | qcon            |";
    "| .z.l   | license                         | .z.r    | blocked         |";
    "| .z.o   | OS version                      | .z.ps   | set             |";
    "| .z.q   | quiet mode                      | .z.pw   | validate user   |";
    "| .z.s   | self                            | .z.ts   | timer           |";
    "| .z.u   | user ID                         | .z.vs   | value set       |";
    "| .z.X/x | raw/parsed command line         |         |                 |";
    "+--------+---------------------------------+---------+-----------------+";
    "| Environment (Compression/Encryption)     | Callbacks (HTTP)          |";
    "+--------+---------------------------------+---------+-----------------+";
    "| .z.zd  | compression/encryption defaults | .z.ac   | HTTP auth       |";
    "+--------+---------------------------------+ .z.ph   | HTTP get        |";
    "| Environment (Connections)                | .z.pm   | HTTP methods    |";
    "+--------+---------------------------------+ .z.pp   | HTTP post       |";
    "| .z.e   | TLS connection status           |         |                 |";
    "| .z.H   | active sockets                  |         |                 |";
    "| .z.W/w | handles/handle                  |         |                 |";
    "+--------+---------------------------------+---------+-----------------+";
    "| Environment (Debug)                      | Callbacks (WebSockets)    |";
    "+--------+---------------------------------+---------+-----------------+";
    "| .z.ex  | failed primitive                | .z.wc   | WebSocket close |";
    "| .z.ey  | arg to failed primitive         | .z.wo   | WebSocket open  |";
    "+--------+---------------------------------+ .z.ws   | WebSockets      |";
    "| Environment (Time/Date)                  |         |                 |";
    "+--------+---------------------------------+         |                 |";
    "| .z.D/d | date shortcuts                  |         |                 |";
    "| .z.N/n | local/UTC timespan              |         |                 |";
    "| .z.P/p | local/UTC timestamp             |         |                 |";
    "| .z.T/t | time shortcuts                  |         |                 |";
    "| .z.Z/z | local/UTC datetime              |         |                 |";
    "+--------+---------------------------------+---------+-----------------+");

.docs.refs[`dtype]:"Datatypes";
.docs.libs[`dtype]:(
    "https://code.kx.com/q/basics/datatypes/#datatypes";
    "";
    "Basic datatypes";
    "";
    "Columns:";
    "n    short int returned by type and used for Cast, e.g. 9h$3 (negative for atoms of basic datatypes, positive for everything else)";
    "c    character used lower-case for Cast and upper-case for Tok and Load CSV";
    "sz   size in bytes";
    "inf  infinity (no math on temporal types); 0Wh is 32767h";
    "+-------+---+-----------------+----+-------------------------------+------+-----+-----------+-----------+---------------+";
    "| n     | c | name            | sz | literal                       | null | inf | SQL       | Java      | .Net          |";
    "+-------+---+-----------------+----+-------------------------------+------+-----+-----------+-----------+---------------+";
    "| 0     | * | list            |    | ()                            |      |     |           |           |               |";
    "| 1     | b | boolean         | 1  | 0b                            |      |     |           | Boolean   | boolean       |";
    "| 2     | g | guid            | 16 |                               | 0Ng  |     |           | UUID      | GUID          |";
    "| 4     | x | byte            | 1  | 0x00                          |      |     |           | Byte      | byte          |";
    "| 5     | h | short           | 2  | 0h                            | 0Nh  | 0Wh | smallint  | Short     | int16         |";
    "| 6     | i | int             | 4  | 0i                            | 0Ni  | 0Wi | int       | Integer   | int32         |";
    "| 7     | j | long            | 8  | 0j                            | 0Nj  | 0Wj | bigint    | Long      | int64         |";
    "|       |   |                 |    | 0                             | 0N   | 0W  |           |           |               |";
    "| 8     | e | real            | 4  | 0e                            | 0Ne  | 0We | real      | Float     | single        |";
    "| 9     | f | float           | 8  | 0.0                           | 0n   | 0w  | float     | Double    | double        |";
    "|       |   |                 |    | 0f                            | 0Nf  |     |           |           |               |";
    "| 10    | c | char            | 1  | \" \"                           | \" \"  |     |           | Character | char          |";
    "| 11    | s | symbol          |    | `                             | `    |     | varchar   |           |               |";
    "| 12    | p | timestamp       | 8  | 2000.01.01D00:00:00.000000000 | 0Np  | 0Wp |           | Timestamp | DateTime (RW) |";
    "| 13    | m | month           | 4  | 2000.01m                      | 0Nm  | 0Wm |           |           |               |";
    "| 14    | d | date            | 4  | 2000.01.01                    | 0Nd  | 0Wd | date      | Date      |               |";
    "| 15    | z | datetime        | 8  | 2000.01.01T00:00:00.000       | 0Nz  | 0wz | timestamp | Timestamp | DateTime (RO) |";
    "| 16    | n | timespan        | 8  | 00:00:00.000000000            | 0Nn  | 0Wn |           | Timespan  | TimeSpan      |";
    "| 17    | u | minute          | 4  | 00:00                         | 0Nu  | 0Wu |           |           |               |";
    "| 18    | v | second          | 4  | 00:00:00                      | 0Nv  | 0Wv |           |           |               |";
    "| 19    | t | time            | 4  | 00:00:00.000                  | 0Nt  | 0Wt | time      | Time      | TimeSpan      |";
    "+-------+---+-----------------+----+-------------------------------+------+-----+-----------+-----------+---------------+";
    "| 20-76 |   | enums           |    | `zym$10?zym:`AAPL`GOOG`IBM    |      |     |           |           |               |";
    "+-------+---+-----------------+----+-------------------------------+------+-----+-----------+-----------+---------------+";
    "| 78-96 |   | 77+t - mapped (nested) list of lists of type t       |      |     |           |           |               |";
    "|       |   | e.g. 78 is boolean. 96 is time.                      |      |     |           |           |               |";
    "+-------+---+-----------------+----+-------------------------------+------+-----+-----------+-----------+---------------+";
    "| 77    |   | anymap          |    | get`:a set (1 2 3;\"cde\")      |      |     |           |           |               |";
    "+-------+---+-----------------+----+-------------------------------+------+-----+-----------+-----------+---------------+";
    "| 97    |   | nested sym enum |    |                               |      |     |           |           |               |";
    "+-------+---+-----------------+----+-------------------------------+------+-----+-----------+-----------+---------------+";
    "| 98    |   | table           |    | ([] c1:`a`b`c; c2:10 20 30)   |      |     |           |           |               |";
    "| 99    |   | dictionary      |    | `a`b`c!10 20 30               |      |     |           |           |               |";
    "|       |   |                 |    | ([a:10;b:20;c:30]) ([a:10])   |      |     |           |           |               |";
    "| 100   |   | lambda          |    | {x}                           |      |     |           |           |               |";
    "| 101   |   | unary primitive |    | (::) abs neg til ...          |      |     |           |           |               |";
    "| 102   |   | operator        |    | . $ ! ? + - * %  ...          |      |     |           |           |               |";
    "| 103   |   | iterator        |    | ' ': /: \\: / \\   ...          |      |     |           |           |               |";
    "| 104   |   | projection      |    | 2* {x+y*z}[3;;4]              |      |     |           |           |               |";
    "| 105   |   | composition     |    | ('[raze;string])              |      |     |           |           |               |";
    "| 106   |   | f'              |    | ,'                            |      |     |           |           |               |";
    "| 107   |   | f/              |    | +/                            |      |     |           |           |               |";
    "| 108   |   | f\\              |    | +\\                            |      |     |           |           |               |";
    "| 109   |   | f':             |    | :':                           |      |     |           |           |               |";
    "| 110   |   | f/:             |    | +/:                           |      |     |           |           |               |";
    "| 111   |   | f\\:             |    | +\\:                           |      |     |           |           |               |";
    "| 112   |   | dynamic load    |    | `f 2:`f,1                     |      |     |           |           |               |";
    "+-------+---+-----------------+----+-------------------------------+------+-----+-----------+-----------+---------------+";
    "Above, f is an applicable value.";
    "";
    "date.(year month week mm dd)";
    "time.(minute second mm ss)";
    "milliseconds: time mod 1000");

.docs.refs[`exec]:"Execution control";
.docs.libs[`exec]:(
    "https://code.kx.com/q/ref/#execution-control";
    "";
    "Execution control";
    "+----------------+---------------------+";
    "| .[f;x;e]       | Trap                |";
    "| @[f;x;e]       | Trap-At             |";
    "| :              | Return              |";
    "| '              | Signal              |";
    "| do             | exit                |";
    "| if             | while               |";
    "| $[x;y;z]       | Cond                |";
    "| :[v;p1;r1;...] | Pattern conditional |";
    "+----------------+---------------------+");

.docs.refs[`glyphs]:"Overloaded glyphs";
.docs.libs[`glyphs]:(
    "https://code.kx.com/q/ref/overloads/#overloaded-glyphs";
    "";
    "Overloaded glyphs";
    "- Many non-alphabetic keyboard characters are overloaded. Operator overloads are resolved by rank, and sometimes by the type of argument/s.";
    "";
    "@ at";
    "+------+-------------+------------+";
    "| rank | syntax      | semantics  |";
    "+------+-------------+------------+";
    "| 2    | l@i, @[l;i] | Index At   |";
    "| 2    | f@y, @[f;y] | Apply At   |";
    "| 3    | @[f;y;e]    | Trap At    |";
    "| 3    | @[d;i;u]    | Amend At   |";
    "| 4    | @[d;i;m;my] | Amend At   |";
    "| 4    | @[d;i;:;y]  | Replace At |";
    "+------+-------------+------------+";
    "";
    "\\ backslash";
    "+------+----------------------+------------------------+    legend";
    "| rank | syntax               | semantics              |    +----------------------------------------+";
    "+------+----------------------+------------------------+    | d         | data                       |";
    "| NA   | \\                    | ends multiline comment |    | u         | unary value                |";
    "| NA   | \\                    | Abort, Toggle          |    | v         | value rank>1               |";
    "| 1    | (u\\), u\\[d]          | Converge               |    | n         | non-negative integer atom  |";
    "| 2    | n u\\d, u\\[n;d]       | Do                     |    | t         | test value                 |";
    "| 2    | t u\\d, u\\[t;d]       | While                  |    | x         | atom or vector             |";
    "| 2    | x v\\y, v\\[x;y;z;...] | map-reduce             |    | y, z, ... | conformable atoms or lists |";
    "+------+----------------------+------------------------+    +----------------------------------------+";
    "";
    "! bang";
    "+------+------------+----------------------------------+    legend";
    "| rank | syntax     | semantics                        |    +-------+------------------------------------------+";
    "+------+------------+----------------------------------+    | a     | select specifications                    |";
    "| 2    | x!y        | Dict: make a dictionary          |    | b     | group-by specifications                  |";
    "| 2    | i!ts       | Enkey: make a simple table keyed |    | c     | where-specifications                     |";
    "| 2    | 0!tk       | Unkey: make a keyed table simple |    | h     | handle to a splayed or partitioned table |";
    "| 2    | noasv!iv   | Enumeration from index           |    | i     | integer >0                               |";
    "| 2    | sv!h       | Flip Splayed or Partitioned      |    | noasv | symbol atom, the name of a symbol vector |";
    "| 2    | 0N!y       | display y and return it          |    | sv    | symbol vector                            |";
    "| 2    | -i!y       | internal function                |    | t     | table                                    |";
    "| 4    | ![t;c;b;a] | Update, Delete                   |    | tk    | keyed table                              |";
    "+------+------------+----------------------------------+    | ts    | simple table                             |";
    "                                                            | x,y   | same-length lists                        |";
    "                                                            +-------+------------------------------------------+";
    "";
    ": colon";
    "+---------+-----------------+";
    "| literal | semantics       |";
    "+---------+-----------------+";
    "| a:42    | assign          |";
    "| :42     | explicit return |";
    "+---------+-----------------+";
    "";
    ":: colon colon";
    "+-------------------------------+-------------------------------------+";
    "| literal                       | semantics                           |";
    "+-------------------------------+-------------------------------------+";
    "| v::select from t where a in b | define a view                       |";
    "| global::42                    | amend a global from within a lambda |";
    "| ::                            | Identity                            |";
    "| ::                            | Null                                |";
    "+-------------------------------+-------------------------------------+";
    "";
    "- dash";
    "+------+---------+-----------------+    legend";
    "| rank | example | semantics       |    +----------------------------------------+";
    "+------+---------+-----------------+    | n         | non-negative integer atom  |";
    "| NA   | -n      | Negative number |    +----------------------------------------+";
    "| 2    | 2-3     | Subtract        |";
    "+------+---------+-----------------+";
    "";
    ". dot";
    "+------+-----------------+------------+";
    "| rank | syntax          | semantics  |";
    "+------+-----------------+------------+";
    "| NA   | .               | Push stack |";
    "| 2    | l . i, .[l;i]   | Index      |";
    "| 2    | g . gx, .[g;gx] | Apply      |";
    "| 3    | .[g;gx;e]       | Trap       |";
    "| 3    | .[d;i;u]        | Amend      |";
    "| 4    | .[d;i;m;my]     | Amend      |";
    "| 4    | .[d;i;:;y]      | Replace    |";
    "+------+-----------------+------------+";
    "";
    "$ dollar";
    "+------+-------------------------------------+-----------------------------------+";
    "| rank | example                             | semantics                         |";
    "+------+-------------------------------------+-----------------------------------+";
    "| 3    | $[x>10;y;z]                         | Cond: conditional evaluation      |";
    "| 2    | \"h\"$y, `short$y, 11h$y              | Cast: cast datatype               |";
    "| 2    | \"H\"$y, -11h$y                       | Tok: interpret string as data     |";
    "| 2    | x$y                                 | Enumerate: enumerate y from x     |";
    "| 2    | 10$\"abc\"                            | Pad: pad string                   |";
    "| 2    | (1 2 3f;4 5 6f)$(7 8f;9 10f;11 12f) | dot product, matrix multiply, mmu |";
    "+------+-------------------------------------+-----------------------------------+";
    "";
    "# hash";
    "+------+-----------+---------------+";
    "| rank | example   | semantics     |";
    "+------+-----------+---------------+";
    "| 2    | 2 3#til 6 | Take          |";
    "| 2    | s#1 2 3   | Set Attribute |";
    "+------+-----------+---------------+";
    "";
    "? query";
    "+------+---------------------------+------------------------------------+";
    "| rank | example                   | semantics                          |";
    "+------+---------------------------+------------------------------------+";
    "| 2    | \"abcdef\"?\"cab\"            | Find y in x                        |";
    "| 2    | 10?1000, 5?01b            | Roll                               |";
    "| 2    | -10?1000, -1?`yes`no      | Deal                               |";
    "| 2    | 0N?1000, 0N?`yes`no       | Permute                            |";
    "| 2    | x?v                       | extend an enumeration: Enum Extend |";
    "| 3    | ?[11011b;\"black\";\"flock\"] | Vector Conditional                 |";
    "| 3    | ?[t;i;p]                  | Simple Exec                        |";
    "| 4    | ?[t;c;b;a]                | Select, Exec                       |";
    "| 5    | ?[t;c;b;a;n]              | Select                             |";
    "| 6    | ?[t;c;b;a;n;(g;cn)]       | Select                             |";
    "+------+---------------------------+------------------------------------+";
    "";
    "' quote";
    "+------+----------------------------------+-----------------------------------+    legend";
    "| rank | syntax                           | semantics                         |    +------+-------------------+";
    "+------+----------------------------------+-----------------------------------+    | u    | unary value       |";
    "| 1    | (u')x, u'[x], x b'y, v'[x;y;...] | Each: iterate u, b or v itemwise  |    | b    | binary value      |";
    "| 1    | 'msg                             | Signal an error                   |    | v    | value of rank >=1 |";
    "| 1    | int'[x;y;...]                    | Case: successive items from lists |    | int  | int vector        |";
    "| 2    | '[u;v]                           | Compose u with v                  |    | msg  | symbol or string  |";
    "+------+----------------------------------+-----------------------------------+    | x, y | data              |";
    "                                                                                   +------+-------------------+";
    "";
    "': quote-colon";
    "+------+---------+----------------------------+";
    "| rank | example | semantics                  |";
    "+------+---------+----------------------------+";
    "| 1    | u':     | Each Parallel with unary u |";
    "| 1    | b':     | Each Prior with binary b   |";
    "+------+---------+----------------------------+";
    "";
    "/ slash";
    "+------+--------------------------+------------------------------------+    legend";
    "| rank | syntax                   | semantics                          |    +---+------------------------+";
    "+------+--------------------------+------------------------------------+    | u | unary value            |";
    "| NA   | /comment line            | comment: ignore entire line        |    | v | value rank >=1         |";
    "| NA   | <code> /trailing comment | comment: ignore trailing line      |    | n | non-negative int atom  |";
    "| 1    | (u/)y, u/[y]             | Converge                           |    | t | test value             |";
    "| 1    | n u/ y, u/[n;y]          | Do                                 |    | y | list                   |";
    "| 1    | t u/ y, u/[t;y]          | While                              |    +---+------------------------+";
    "| 1    | (v/)y, v/[y]             | map-reduce: reduce a list or lists |";
    "+------+--------------------------+------------------------------------+";
    "- In a script, a line with a solitary / marks the beginning of a multiline comment.";
    "- A multiline comment is terminated by a \\ or the end of the script.";
    "";
    "_ underscore";
    "+------+-----------+-----------+";
    "| rank | example   | semantics |";
    "+------+-----------+-----------+";
    "| 2    | 3_ til 10 | Cut, Drop |";
    "+------+-----------+-----------+";
    "- Names can contain underscores";
    "- Best practice is to use a space to separate names and the Cut and Drop operators.");

.docs.refs[`intfunc]:"Internal functions";
.docs.libs[`intfunc]:(
    "https://code.kx.com/q/basics/internal/#internal-functions";
    "";
    "Internal functions";
    "+-----------+------------------------------+----------------+";
    "| 0N!x      | show                         | Replaced:      |";
    "| -4!x      | tokens                       +----------------+";
    "| -8!x      | to bytes                     | -1!  | hsym    |";
    "| -9!x      | from bytes                   | -2!  | attr    |";
    "| -10!x     | type enum                    | -3!  | .Q.s1   |";
    "| -11!      | streaming execute            | -5!  | parse   |";
    "| -14!x     | quote escape                 | -6!  | eval    |";
    "| -16!x     | ref count                    | -7!  | hcount  |";
    "| -18!x     | compress bytes               | -12! | .Q.host |";
    "| -21!x     | compression/encryption stats | -13! | .Q.addr |";
    "| -22!x     | uncompressed length          | -15! | md5     |";
    "| -23!x     | memory map                   | -19! | set     |";
    "| -25!x     | async broadcast              | -20! | .Q.gc   |";
    "| -26!x     | SSL                          | -24! | reval   |";
    "| -27!(x;y) | format                       | -29! | .j.k    |";
    "| -30!x     | deferred response            | -31! | .j.jd   |";
    "| -33!x     | SHA-1 hash                   | -32! | .Q.btoa |";
    "| -36!      | load master key              | -34! | .Q.ts   |";
    "| -38!x     | socket table                 | -35! | .Q.gz   |";
    "| -120!x    | memory domain                | -37! | .Q.prf0 |";
    "+-----------+------------------------------+----------------+");

.docs.refs[`iterators]:"Iterators";
.docs.libs[`iterators]:(
    "https://code.kx.com/q/ref/#iterators";
    "";
    "Iterators";
    "+---------------------------+";
    "| maps                      |";
    "+----+----------------------+";
    "| '  | Each, each, Case     |";
    "| ': | Each Parallel, peach |";
    "| ': | Each Prior, prior    |";
    "| /: | Each Right           |";
    "| \\: | Each Left            |";
    "+----+----------------------+";
    "| accumulators              |";
    "+----+----------------------+";
    "| /  | Over, over           |";
    "| \\  | Scan, scan           |";
    "+----+----------------------+");

.docs.refs[`keycat]:"Keywords by category";
.docs.libs[`keycat]:(
    "https://code.kx.com/q/ref/#by-category";
    "";
    "Keywords by category";
    "+-----------+------------------------------------------------------------------------------------------+";
    "| control   | do exit if while                                                                         |";
    "+-----------+------------------------------------------------------------------------------------------+";
    "| interpret | eval parse reval show system value                                                       |";
    "+-----------+------------------------------------------------------------------------------------------+";
    "| io        | dsave get hclose hcount hdel hopen hsym load read0 read1 rload rsave save set            |";
    "+-----------+------------------------------------------------------------------------------------------+";
    "| iterate   | each over peach prior scan                                                               |";
    "+-----------+------------------------------------------------------------------------------------------+";
    "| join      | aj aj0 ajf ajf0 asof ej ij ijf lj ljf pj uj ujf wj wj1                                   |";
    "+-----------+------------------------------------------------------------------------------------------+";
    "| list      | count cross cut enlist except fills first flip group in inter last mcount next prev raze |";
    "|           | reverse rotate sublist sv til union vs where xprev                                       |";
    "+-----------+------------------------------------------------------------------------------------------+";
    "| logic     | all and any not or                                                                       |";
    "+-----------+------------------------------------------------------------------------------------------+";
    "| math      | abs acos asin atan avg avgs ceiling cor cos cov deltas dev div ema exp floor inv log lsq |";
    "|           | mavg max maxs mdev med min mins mmax mmin mmu mod msum neg prd prds rand ratios          |";
    "|           | reciprocal scov sdev signum sin sqrt sum sums svar tan var wavg within wsum xexp xlog    |";
    "+-----------+------------------------------------------------------------------------------------------+";
    "| meta      | attr null tables type view views                                                         |";
    "+-----------+------------------------------------------------------------------------------------------+";
    "| query     | delete exec fby select update                                                            |";
    "+-----------+------------------------------------------------------------------------------------------+";
    "| sort      | asc bin binr desc differ distinct iasc idesc rank xbar xrank                             |";
    "+-----------+------------------------------------------------------------------------------------------+";
    "| table     | cols csv fkeys insert key keys meta ungroup upsert xasc xcol xcols xdesc xgroup xkey     |";
    "+-----------+------------------------------------------------------------------------------------------+";
    "| text      | like lower ltrim md5 rtrim ss ssr string trim upper                                      |";
    "+-----------+------------------------------------------------------------------------------------------+");

.docs.refs[`keywords]:"Keywords";
.docs.libs[`keywords]:(
    "https://code.kx.com/q/ref/#keywords";
    "";
    "Keywords";
    "+---------+----------+--------+--------+--------+-------+------------+---------+---------+--------+";
    "|abs      | cor      | ej     | gtime  | like   | mins  | prev       | scov    | system  | wavg   |";
    "|acos     | cos      | ema    | hclose | lj,ljf | mmax  | prior      | sdev    | tables  | where  |";
    "|aj,aj0   | count    | enlist | hcount | load   | mmin  | rand       | select  | tan     | while  |";
    "|ajf,ajf0 | cov      | eval   | hdel   | log    | mmu   | rank       | set     | til     | within |";
    "|all      | cross    | except | hopen  | lower  | mod   | ratios     | setenv  | trim    | wj,wj1 |";
    "|and      | csv      | exec   | hsym   | lsq    | msum  | raze       | show    | type    | wsum   |";
    "|any      | cut      | exit   | iasc   | ltime  | neg   | read0      | signum  | uj,ujf  | xasc   |";
    "|asc      | delete   | exp    | idesc  | ltrim  | next  | read1      | sin     | ungroup | xbar   |";
    "|asin     | deltas   | fby    | if     | mavg   | not   | reciprocal | sqrt    | union   | xcol   |";
    "|asof     | desc     | fills  | ij,ijf | max    | null  | reval      | ss      | update  | xcols  |";
    "|atan     | dev      | first  | in     | maxs   | or    | reverse    | ssr     | upper   | xdesc  |";
    "|attr     | differ   | fkeys  | insert | mcount | over  | rload      | string  | upsert  | xexp   |";
    "|avg      | distinct | flip   | inter  | md5    | parse | rotate     | sublist | value   | xgroup |";
    "|avgs     | div      | floor  | inv    | mdev   | peach | rsave      | sum     | var     | xkey   |";
    "|bin,binr | do       | get    | key    | med    | pj    | rtrim      | sums    | view    | xlog   |";
    "|ceiling  | dsave    | getenv | keys   | meta   | prd   | save       | sv      | views   | xprev  |";
    "|cols     | each     | group  | last   | min    | prds  | scan       | svar    | vs      | xrank  |";
    "+---------+----------+--------+--------+--------+-------+------------+---------+---------+--------+");

.docs.refs[`operators]:"Operators";
.docs.libs[`operators]:(
    "https://code.kx.com/q/ref/#operators";
    "";
    "Operators";
    "+------------------------+---------------------------------------------------------------------------------------+";
    "| .                      | Apply, Index, Trap, Amend                                                             |";
    "| @                      | Apply At, Index At, Trap At, Amend At                                                 |";
    "| $                      | Cast, Tok, Enumerate, Pad, mmu                                                        |";
    "| !                      | Dict, Enkey, Unkey, Enumeration, Flip Splayed, Display, internal, Update, Delete, lsq |";
    "| ?                      | Find, Roll, Deal, Enum Extend, Select, Exec, Simple Exec, Vector Conditional          |";
    "| + - * %                | Add, Subtract, Multiply, Divide                                                       |";
    "| = <> ~                 | Equals, Not Equals, Match                                                             |";
    "| < <= >= >              | Less Than, Up To, At Least, Greater Than                                              |";
    "| | &                    | Greater (OR), Lesser, AND                                                             |";
    "| #                      | Take, Set Attribute                                                                   |";
    "| _                      | Cut, Drop                                                                             |";
    "| :                      | Assign                                                                                |";
    "| ^                      | Fill, Coalesce                                                                        |";
    "| ,                      | Join                                                                                  |";
    "| '                      | Compose                                                                               |";
    "| 0: 1: 2:               | File Text, File Binary, Dynamic Load                                                  |";
    "| 0 [+/-]1 [+/-]2 [+/-]n | write to console, stdout, stderr, handle n                                            |";
    "+------------------------+---------------------------------------------------------------------------------------+");

.docs.refs[`other]:"Other";
.docs.libs[`other]:(
    "https://code.kx.com/q/ref/#other";
    "";
    "Other";
    "+--------+--------------+";
    "| `      | pop stack    |";
    "| .      | push stack   |";
    "+--------+--------------+";
    "| ::     | identity     |";
    "|        | generic null |";
    "|        | global amend |";
    "|        | set view     |";
    "+--------+--------------+";
    "| \\x     | system cmd x |";
    "| \\      | abort        |";
    "| \\\\     | quit q       |";
    "| /      | comment      |";
    "+--------+--------------+";
    "| ()     | precedence   |";
    "| (;)    | list         |";
    "| ([]..) | table        |";
    "+--------+--------------+";
    "| [;]    | expn block   |";
    "|        | argt list    |";
    "+--------+--------------+";
    "| {}     | lambda       |";
    "| ;      | separator    |";
    "| `      | symbol       |";
    "| `:     | filepath     |";
    "+--------+--------------+");

/ Set globals for easy access
refs:.docs.refs;
docs:.docs.docs;
