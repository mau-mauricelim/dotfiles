#!/usr/bin/env sh
# History configuration
export HISTSIZE=10000
export HISTFILESIZE=10000

# XDG Base directory configuration
export XDG_CONFIG_HOME="$HOME/.config"
export XDG_DATA_HOME="$XDG_CONFIG_HOME/local/share"
export XDG_CACHE_HOME="$XDG_CONFIG_HOME/cache"
export XDG_STATE_HOME="$HOME/.local/state"
# Related issues for XDG_RUNTIME_DIR: https://forums.gentoo.org/viewtopic-t-1164921-start-0.html
isWsl() { grep -qi microsoft /proc/version; }
if isWsl; then
    # BUG: fix for https://github.com/ibhagwan/fzf-lua/issues/1243
    export XDG_RUNTIME_DIR="$XDG_CONFIG_HOME/local/runtime-dir"
    [ -d "$XDG_RUNTIME_DIR" ] || mkdir -p "$XDG_RUNTIME_DIR"
    [ "$(stat -c "%a" "$XDG_RUNTIME_DIR")" = "700" ] || chmod 700 "$XDG_RUNTIME_DIR"
fi

# NOTE: Ctrl-X + Ctrl-E : Edits the current line in the $EDITOR program
export VISUAL=vim
export EDITOR=vim

# Set system locale
export LANG=C.UTF-8
export LANGUAGE=C.UTF-8
export LC_ALL=C.UTF-8
export PAGER=less

# Enable 256 colors with xterm
export TERM=xterm-256color

# Start tmux on every shell login (https://wiki.archlinux.org/title/Tmux#Start_tmux_on_every_shell_login)
if [ -x "$(command -v tmux)" ] && [ -n "${DISPLAY}" ] && [ -z "${TMUX}" ]; then
    # `exec` will replace the current shell
    tmux new-session -A -s "${USER}" >/dev/null 2>&1
fi

# Disable the freeze/unfreeze behavior for Ctrl-S/Q
stty -ixon

addToPath() { [[ -d "$1" ]] && [[ "$PATH" != *"$1"* ]] && export PATH="$PATH:$1"; }
addToPathFront() { [[ -d "$1" ]] && [[ "$PATH" != *"$1"* ]] && export PATH="$1:$PATH"; }
# Function to source file if it exists
sourceFile() { [ -r "$1" ] && [ -f "$1" ] && source "$1"; }

# NOTE: Avoid adding /mnt/c/Windows/System32 to PATH as it is very large!
# https://github.com/Saghen/blink.cmp/issues/795
# Use a symlink to `~/dotfiles/bin` if necessary:
# HACK: WSL2 Ubuntu fix for [markdown-preview.nvim]: Can not open browser by using cmd.exe command
# https://github.com/iamcco/markdown-preview.nvim/issues/309
# `ln -s /mnt/c/Windows/System32/cmd.exe ~/dotfiles/bin`
# HACK: Lazygit: Open pull request in browser
# bash: line 1: powershell.exe: command not found
# `ln -s /mnt/c/Windows/System32/WindowsPowerShell/v1.0/powershell.exe ~/dotfiles/bin`

addToPath "$HOME/bin"

# Set PATH to include Neovim
addToPathFront /opt/nvim-linux-x86_64/bin

# Set PATH so it includes user's git-scripts if it exists
addToPath "$XDG_CONFIG_HOME/git/git-scripts"

# Source the shell dotfiles
for file in $XDG_CONFIG_HOME/{alias,q}/*.sh; do
    sourceFile "$file"
done
unset file

# Highlighting --help messages with bat
if command -v bat >/dev/null; then
    # Ensure help language is installed
    if bat --list-languages | grep -wq help; then
        # Example: $ help cp or $ help git commit
        help() {
            "$@" --help 2>&1 | bat --plain --language=help
        }
        # When you are using zsh, you can also use global aliases to override -h and --help entirely:
        # Example: cp --help
        # Be aware that in some cases, -h may not be a shorthand of --help (for example with ls).
        if [[ -n "${ZSH_VERSION:-}" ]]; then
            alias -g -- -h='-h 2>&1 | bat --language=help --style=plain'
            alias -g -- --help='--help 2>&1 | bat --language=help --style=plain'
        fi
    fi
fi

# fzf setup
if [[ -n "${BASH_VERSION:-}" ]]; then
    sourceFile "${XDG_CONFIG_HOME:-$HOME/.config}"/fzf/fzf.bash
elif [[ -n "${ZSH_VERSION:-}" ]]; then
    sourceFile "${XDG_CONFIG_HOME:-$HOME/.config}"/fzf/fzf.zsh
fi
# fzf-git.sh - unsure why cannot use sourceFile
[ -f "${XDG_CONFIG_HOME:-$HOME/.config}"/fzf/fzf-git.sh ] && source "${XDG_CONFIG_HOME:-$HOME/.config}"/fzf/fzf-git.sh
if command -v rg >/dev/null; then
    # Setting fd as the default source for fzf
    # Now fzf (w/o pipe) will use fd instead of find
    # Follow symbolic links and don't want it to exclude hidden files
    export FZF_DEFAULT_COMMAND='fd --type f --strip-cwd-prefix --hidden --follow --exclude .git'
    # To apply the command to Ctrl-T as well
    export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
fi
# Functions for fzf
if command -v fzf >/dev/null; then
    if command -v fd >/dev/null; then
        ff() {
            # Output to commandline instead of stdout
            # print -z -- $(commands | fzf)
            print -z -- $(fd --strip-cwd-prefix --hidden --follow --exclude .git \
                | fzf --prompt 'All> ' \
                    --header 'Ctrl-A: All / Ctrl-D: Dir / Ctrl-F: File' \
                    --bind 'Ctrl-A:change-prompt(All> )+reload(fd --strip-cwd-prefix --hidden --follow --exclude .git)' \
                    --bind 'Ctrl-D:change-prompt(Dir> )+reload(fd --type d --strip-cwd-prefix --hidden --follow --exclude .git)' \
                    --bind 'Ctrl-F:change-prompt(File> )+reload(fd --type f --strip-cwd-prefix --hidden --follow --exclude .git)')
        }
    fi
    if command -v bat >/dev/null && command -v eza >/dev/null; then
        # Preview file content using bat
        preview_file="bat -n --color=always --line-range :500 {}"
        # Preview dir content as a tree using eza
        preview_dir="eza --tree --group-directories-first --color=always {} | head -200"
        export FZF_CTRL_T_OPTS="
            --header 'Ctrl-/: Toggle preview down/hidden/show'
            --walker-skip .git,node_modules,target
            --preview '$preview_file'
            --bind 'ctrl-/:change-preview-window(down|hidden|)'"
        export FZF_ALT_C_OPTS="
            --walker-skip .git,node_modules,target
            --preview '$preview_dir'"
        # Advanced customization of fzf options via _fzf_comprun function
        # - The first argument to the function is the name of the command.
        # - You should make sure to pass the rest of the arguments to fzf.
        preview_file_or_dir="if [ -d {} ]; then $preview_dir; else $preview_file; fi"
        _fzf_comprun() {
          local command=$1
          shift

          case "$command" in
            cd)           fzf --preview "$preview_dir"         "$@" ;;
            export|unset) fzf --preview "eval 'echo $'{}"      "$@" ;;
            ssh)          fzf --preview 'dig {}'               "$@" ;;
            *)            fzf --preview "$preview_file_or_dir" "$@" ;;
          esac
        }
    fi
fi

# vim-visual-multi tutor with lazy package manager
[ -f "$XDG_DATA_HOME/nvim/lazy/vim-visual-multi/tutorialrc" ] && \
    vvmtutor() { vi -Nu "$XDG_DATA_HOME/nvim/lazy/vim-visual-multi/tutorialrc"; }

# nvm
export NVM_DIR="$([ -z "${XDG_CONFIG_HOME-}" ] && printf %s "${HOME}/.nvm" || printf %s "${XDG_CONFIG_HOME}/nvm")"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" # This loads nvm

# yazi
if command -v yazi >/dev/null; then
    function y() {
        local tmp="$(mktemp -t "yazi-cwd.XXXXXX")"
        yazi "$@" --cwd-file="$tmp"
        if cwd="$(cat -- "$tmp")" && [ -n "$cwd" ] && [ "$cwd" != "$PWD" ]; then
            builtin cd -- "$cwd"
        fi
        rm -f -- "$tmp"
    }
fi

# ssh key permissions
for SSH_KEY in $HOME/.ssh/id_{ed25519,rsa}; do
    if [ -f "$SSH_KEY" ]; then
        PERM=$(stat -c "%a" "$SSH_KEY")
        if (( 10#$PERM > 600 )); then
            echo "ðŸ”‘ Permissions $PERM for '$SSH_KEY' are too open. Updating permissions to 600."
            chmod 600 "$SSH_KEY"
        fi
    fi
done
